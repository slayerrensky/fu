{"url":"https://api.github.com/repos/owncloud/core/issues/4209","labels_url":"https://api.github.com/repos/owncloud/core/issues/4209/labels{/name}","comments_url":"https://api.github.com/repos/owncloud/core/issues/4209/comments","events_url":"https://api.github.com/repos/owncloud/core/issues/4209/events","html_url":"https://github.com/owncloud/core/issues/4209","id":17264305,"number":4209,"title":"use closure tables to implement file cache without full path column","user":{"login":"butonic","id":956847,"avatar_url":"https://gravatar.com/avatar/9760c134cabf66e10dbba06d7525f5c7?d=https%3a%2f%2fidenticons.github.com%2f92925ec1ad893739ed57986f18e2f060.png&r=x","gravatar_id":"9760c134cabf66e10dbba06d7525f5c7","url":"https://api.github.com/users/butonic","html_url":"https://github.com/butonic","followers_url":"https://api.github.com/users/butonic/followers","following_url":"https://api.github.com/users/butonic/following{/other_user}","gists_url":"https://api.github.com/users/butonic/gists{/gist_id}","starred_url":"https://api.github.com/users/butonic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/butonic/subscriptions","organizations_url":"https://api.github.com/users/butonic/orgs","repos_url":"https://api.github.com/users/butonic/repos","events_url":"https://api.github.com/users/butonic/events{/privacy}","received_events_url":"https://api.github.com/users/butonic/received_events","type":"user","site_admin":false},"labels":[{"url":"https://api.github.com/repos/owncloud/core/labels/enhancement","name":"enhancement","color":"02e10c"}],"state":"open","assignee":null,"milestone":null,"comments":1,"created_at":"2013-07-26t13:53:03z","updated_at":"2013-10-17t14:06:11z","closed_at":null,"pull_request":{"html_url":null,"diff_url":null,"patch_url":null},"body":"i need to track this somewhere, so i might just as well do it publicly. past and current filecache implementations rely on a path column containing the full path of file. currently it is limited to 512 chars: https://github.com/owncloud/core/blob/master/db_structure.xml#l224\r\n\r\nthere has been a lot of research on how to store tree like structures in relational databases. a good starting point is [this stackoverflow entry](http://stackoverflow.com/questions/4048151/what-are-the-options-for-storing-hierarchical-data-in-a-relational-database). another comparison can be found in [one more nested intervals vs. adjacency list comparison](http://vadimtropashko.wordpress.com/2008/08/09/one-more-nested-intervals-vs-adjacency-list-comparison/).\r\n\r\nthe most promising approach which i consider superior to eg. nested sets are [closure tables](http://dirtsimple.org/2010/11/simplest-way-to-do-tree-based-queries.html), due to the clear meaning of column values. i know few people who actually understand nested sets ...\r\n\r\ni already had a rudimentary version of them working in the oc4.5 file cache ... dunno if the code is still in some branch on one of my local machines ...\r\n\r\ncc @icewind1991 @bartv2 opinions?","closed_by":null}