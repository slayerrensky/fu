{"url":"https://api.github.com/repos/owncloud/core/issues/2491","labels_url":"https://api.github.com/repos/owncloud/core/issues/2491/labels{/name}","comments_url":"https://api.github.com/repos/owncloud/core/issues/2491/comments","events_url":"https://api.github.com/repos/owncloud/core/issues/2491/events","html_url":"https://github.com/owncloud/core/pull/2491","id":12250812,"number":2491,"title":"improved handling of xsendfile zip generation race condition","user":{"login":"riso","id":448304,"avatar_url":"https://gravatar.com/avatar/27b46efdeb03808d96e894cd30a810c8?d=https%3a%2f%2fidenticons.github.com%2fe3e01a2584d9235f1e909d689b4fa6e1.png&r=x","gravatar_id":"27b46efdeb03808d96e894cd30a810c8","url":"https://api.github.com/users/riso","html_url":"https://github.com/riso","followers_url":"https://api.github.com/users/riso/followers","following_url":"https://api.github.com/users/riso/following{/other_user}","gists_url":"https://api.github.com/users/riso/gists{/gist_id}","starred_url":"https://api.github.com/users/riso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/riso/subscriptions","organizations_url":"https://api.github.com/users/riso/orgs","repos_url":"https://api.github.com/users/riso/repos","events_url":"https://api.github.com/users/riso/events{/privacy}","received_events_url":"https://api.github.com/users/riso/received_events","type":"user","site_admin":false},"labels":[],"state":"closed","assignee":null,"milestone":null,"comments":7,"created_at":"2013-03-20t22:02:35z","updated_at":"2013-08-09t22:16:55z","closed_at":"2013-05-03t12:37:02z","pull_request":{"html_url":"https://github.com/owncloud/core/pull/2491","diff_url":"https://github.com/owncloud/core/pull/2491.diff","patch_url":"https://github.com/owncloud/core/pull/2491.patch"},"body":"with the current x-sendfile implementation the following behavior might happen:\r\n1. download of zip file **a** from web interface is started\r\n2. before that zip generation is completed cron is run\r\n\r\nthis causes the deletion of **a** and therefore an error to the client (notice that this cannot happen during file download because the webserver keeps the file open and denies the removal).\r\n\r\nthis pr helps avoiding this behavior by moving the file to the *oc-noclean* directory only when generation is completed. \r\n\r\nnote that this is not a final fix for the issue (the race condition is mitigated but not removed) since it might happen that cron is run right after zip creation but before that the response is actually sent by php. \r\n\r\nas of writing though i don't have a final fix since that would require some sort of callback on a completed download in order to perform the deletion of the temporary file only at that time (and avoid using cron altogether), but i don't think that this is possible due to the fact that the download is entirely managed by the webserver.","closed_by":{"login":"bartv2","id":2227877,"avatar_url":"https://gravatar.com/avatar/c2d86a0a66a4be2c904e24034e842f44?d=https%3a%2f%2fidenticons.github.com%2f05e8b1362feb118a386dfd282b20fb84.png&r=x","gravatar_id":"c2d86a0a66a4be2c904e24034e842f44","url":"https://api.github.com/users/bartv2","html_url":"https://github.com/bartv2","followers_url":"https://api.github.com/users/bartv2/followers","following_url":"https://api.github.com/users/bartv2/following{/other_user}","gists_url":"https://api.github.com/users/bartv2/gists{/gist_id}","starred_url":"https://api.github.com/users/bartv2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bartv2/subscriptions","organizations_url":"https://api.github.com/users/bartv2/orgs","repos_url":"https://api.github.com/users/bartv2/repos","events_url":"https://api.github.com/users/bartv2/events{/privacy}","received_events_url":"https://api.github.com/users/bartv2/received_events","type":"user","site_admin":false}}