{"url":"https://api.github.com/repos/owncloud/core/issues/2025","labels_url":"https://api.github.com/repos/owncloud/core/issues/2025/labels{/name}","comments_url":"https://api.github.com/repos/owncloud/core/issues/2025/comments","events_url":"https://api.github.com/repos/owncloud/core/issues/2025/events","html_url":"https://github.com/owncloud/core/issues/2025","id":11573863,"number":2025,"title":"requirements, new protocol","user":{"login":"axet","id":298672,"avatar_url":"https://gravatar.com/avatar/18587a2287ed4b6e337517ba3aee43ae?d=https%3a%2f%2fidenticons.github.com%2fee4d74655edb6dafe7b8cc1992f8c13d.png&r=x","gravatar_id":"18587a2287ed4b6e337517ba3aee43ae","url":"https://api.github.com/users/axet","html_url":"https://github.com/axet","followers_url":"https://api.github.com/users/axet/followers","following_url":"https://api.github.com/users/axet/following{/other_user}","gists_url":"https://api.github.com/users/axet/gists{/gist_id}","starred_url":"https://api.github.com/users/axet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/axet/subscriptions","organizations_url":"https://api.github.com/users/axet/orgs","repos_url":"https://api.github.com/users/axet/repos","events_url":"https://api.github.com/users/axet/events{/privacy}","received_events_url":"https://api.github.com/users/axet/received_events","type":"user","site_admin":false},"labels":[],"state":"closed","assignee":null,"milestone":null,"comments":2,"created_at":"2013-03-02t09:17:07z","updated_at":"2013-03-02t10:25:54z","closed_at":"2013-03-02t10:25:54z","pull_request":{"html_url":null,"diff_url":null,"patch_url":null},"body":"owncloud is missing some important features.\r\n\r\nright now. owncloud bugged, and in many cases you losing / duplicate files or create hudge traffic. if you build a new exchange protocol, it solve all issues, and create the best exchange online storage ever.\r\n\r\nthe ideal file sync solution should meet following requirements:\r\n\r\n1) compression.\r\n\r\nwhen you upload files, you wish not to waste trafic for simple text or data files. simple example:\r\n\r\nwhen you do: dd if=/dev/zero of=testzero bs=100m count=1, you wish this zero contain file will uploaded in 1 second, because it contains no data. which can easily be compressed to few kilo-bytes. in this case 100 mega byte file should not waste 100m of trafic but just 1-5 kb.\r\n\r\n2)  chunk upload.\r\n\r\nwhen you are going to change huge file, size of 10gb, by adding 5 bytes at the end. you do not expect all 10gb file to reupload again, because of this simple change. you are expecting only to upload 5 bytes or 1 mb (because of client understand it, and divide file by chunks of 3 mb each. so only 3 mb will be reuploaded.\r\n\r\nto test it create ecrypted disk image 100mb solution, upload it, open it and add new folder. as a result you wish to expect new upload in size of 1mb instead of 100mb.\r\n\r\n3) user interface\r\n\r\nyou wish to control each file going and have been uploaded using the gui of client.\r\n\r\n4) smart upload\r\n\r\nyou wish to finish to work with your file, before the client going to upload it to server. otherwise client will upload partial, sometimes broken solution to the server. imagine if you work with a virtual machine, which hard drive had half uploaded during the work? you will get broken virtual stat which is not recoverable.\r\n\r\nto test it create encrypted file size of 100mb, open it, add folder and no not unmount. client should not try to sync it, until you unmount it.\r\n\r\n5) clone\r\n\r\nsome times you wish to re-arrange files on you local machine. do you wish to re-upload files, which already has been uploaded, but from new location? of course not! same file, no matter from what folder, you wish to see as duplicate, transparent from user point of view, already uploaded and moved polite to new colation without any reupload.\r\n\r\nto test this feature, create a copy of already uploaded file in the same folder. upload should finish at the same time then you finish the clone operation (without any actual file transfer)\r\n\r\nthis is requirements. the first part. next is protocol.\r\n\r\nthe web standart protocol for file managment is webdav. you probably already know it. and this protocol is limited for features i have described above.\r\n\r\nwhat is really important here is offline folder solution, which you require, is not compatible to webdav. it just not part of the standart and can't be done using webdav.\r\n\r\nany good file-cloud-sync service should provide all features i've described above + webdav. and owncloud is limited to booth: your feature (file folder sync) and another full feature exchange protocol.\r\n","closed_by":{"login":"karlitschek","id":867445,"avatar_url":"https://gravatar.com/avatar/87ce2b4531ee1a0c32b50e0d8f049224?d=https%3a%2f%2fidenticons.github.com%2f06e7098636caebfc9c30c9f52eb905df.png&r=x","gravatar_id":"87ce2b4531ee1a0c32b50e0d8f049224","url":"https://api.github.com/users/karlitschek","html_url":"https://github.com/karlitschek","followers_url":"https://api.github.com/users/karlitschek/followers","following_url":"https://api.github.com/users/karlitschek/following{/other_user}","gists_url":"https://api.github.com/users/karlitschek/gists{/gist_id}","starred_url":"https://api.github.com/users/karlitschek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/karlitschek/subscriptions","organizations_url":"https://api.github.com/users/karlitschek/orgs","repos_url":"https://api.github.com/users/karlitschek/repos","events_url":"https://api.github.com/users/karlitschek/events{/privacy}","received_events_url":"https://api.github.com/users/karlitschek/received_events","type":"user","site_admin":false}}