{"url":"https://api.github.com/repos/owncloud/core/issues/6529","labels_url":"https://api.github.com/repos/owncloud/core/issues/6529/labels{/name}","comments_url":"https://api.github.com/repos/owncloud/core/issues/6529/comments","events_url":"https://api.github.com/repos/owncloud/core/issues/6529/events","html_url":"https://github.com/owncloud/core/issues/6529","id":24619007,"number":6529,"title":"discussion about common method of keeping track of (to) scanned files","user":{"login":"bartv2","id":2227877,"avatar_url":"https://gravatar.com/avatar/c2d86a0a66a4be2c904e24034e842f44?d=https%3a%2f%2fidenticons.github.com%2f05e8b1362feb118a386dfd282b20fb84.png&r=x","gravatar_id":"c2d86a0a66a4be2c904e24034e842f44","url":"https://api.github.com/users/bartv2","html_url":"https://github.com/bartv2","followers_url":"https://api.github.com/users/bartv2/followers","following_url":"https://api.github.com/users/bartv2/following{/other_user}","gists_url":"https://api.github.com/users/bartv2/gists{/gist_id}","starred_url":"https://api.github.com/users/bartv2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bartv2/subscriptions","organizations_url":"https://api.github.com/users/bartv2/orgs","repos_url":"https://api.github.com/users/bartv2/repos","events_url":"https://api.github.com/users/bartv2/events{/privacy}","received_events_url":"https://api.github.com/users/bartv2/received_events","type":"user","site_admin":false},"labels":[{"url":"https://api.github.com/repos/owncloud/core/labels/app%3afiles","name":"app:files","color":"02d7e1"},{"url":"https://api.github.com/repos/owncloud/core/labels/discussion","name":"discussion","color":"fbca04"}],"state":"open","assignee":null,"milestone":null,"comments":5,"created_at":"2013-12-20t12:18:59z","updated_at":"2013-12-20t15:15:42z","closed_at":null,"pull_request":{"html_url":null,"diff_url":null,"patch_url":null},"body":"from https://github.com/owncloud/music/issues/90#issuecomment-24192890:\r\n```\r\ni had to find a solution for the 'scan a lot of files' problem when working on search_lucene.\r\n\r\nimho the files app has the best scanning mechanism because it saves the scan status in the filecache table. can we find a general solution for scanning mechanisms? how do we mark a file as scanned by search_lucene (i currently join my own status table with the filecache table ... but meh) or by music (or by pictures or by videos)? all of them could extract meta data. i personally would like to explore zend_lucene for searching through that ... (cc @andrewsbrown) ... but i may be biased. perhaps we can come up with a more general search api that can use either the database or zend lucene ....\r\n\r\nanyway. i propose the following approach: we create a new onscan event/hook that apps that want to extract meta data can register for. correct me if i am wrong but the files app currently determines the mime type and basic file meta data. music could listen for audio files and then use getid3 to extract more specific meta data. search_lucene likewise. unfortunately, this naive implementations will cause synchronization to take longer because the file app scans the file on write causing an upload via webdav to wait for all meta extraction to be complete. therefore we need to separate \"file app\"-scanning and meta data indexing from each other. this is where background processes come into play. i just don't know yet if adding a separate job for each file makes sense or if just adding a \"reindex\" job is more elegant. the problem with a \"reindex\" job is that you don't want to reindex all files but only the ones that are new. in search_lucene i use a status table to keep track of this. music could use a flag in the songs table but then we are duplicating the mechanism. single jobs will fill the jobs table quite quickly ...\r\n```\r\ni also have a table for the antivirus background scanner, so having a common sollution would be nice\r\n@icewind1991 @karlitschek @kabum @deepdiver1975","closed_by":null}