{"url":"https://api.github.com/repos/owncloud/core/issues/4782","labels_url":"https://api.github.com/repos/owncloud/core/issues/4782/labels{/name}","comments_url":"https://api.github.com/repos/owncloud/core/issues/4782/comments","events_url":"https://api.github.com/repos/owncloud/core/issues/4782/events","html_url":"https://github.com/owncloud/core/pull/4782","id":19219466,"number":4782,"title":"tune legacy cache webdav properties prefixing","user":{"login":"butonic","id":956847,"avatar_url":"https://gravatar.com/avatar/9760c134cabf66e10dbba06d7525f5c7?d=https%3a%2f%2fidenticons.github.com%2f92925ec1ad893739ed57986f18e2f060.png&r=x","gravatar_id":"9760c134cabf66e10dbba06d7525f5c7","url":"https://api.github.com/users/butonic","html_url":"https://github.com/butonic","followers_url":"https://api.github.com/users/butonic/followers","following_url":"https://api.github.com/users/butonic/following{/other_user}","gists_url":"https://api.github.com/users/butonic/gists{/gist_id}","starred_url":"https://api.github.com/users/butonic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/butonic/subscriptions","organizations_url":"https://api.github.com/users/butonic/orgs","repos_url":"https://api.github.com/users/butonic/repos","events_url":"https://api.github.com/users/butonic/events{/privacy}","received_events_url":"https://api.github.com/users/butonic/received_events","type":"user","site_admin":false},"labels":[],"state":"open","assignee":null,"milestone":null,"comments":13,"created_at":"2013-09-09t20:05:34z","updated_at":"2013-11-01t15:31:06z","closed_at":null,"pull_request":{"html_url":"https://github.com/owncloud/core/pull/4782","diff_url":"https://github.com/owncloud/core/pull/4782.diff","patch_url":"https://github.com/owncloud/core/pull/4782.patch"},"body":"@felixboehm reported lengthy upgrades from oc4.5 to oc5. other than adding indexes this might help as well because it prefixes the webdav properties in one sql statement instead of individual update statements. the performance could be further improved with an index on the `propertyname` column:\r\n```sql\r\ncreate index oc_properties_propertyname on oc_properties(propertyname);\r\n```\r\n\r\nsince we are talking 500.000+ rows creating the index might take even longer than executing the update.\r\n@icewind1991 could you check i did not screw up the sql?\r\n@felixboehm would be awesome if you could check the performance. if there is a mysql db you can try to further improve the performance by disabling index updates prior to executing the update:\r\n```sql\r\nalter table `oc_properties` disable keys;\r\n```\r\nand enabling them afterwards:\r\n```sql\r\nalter table `oc_properties` enable keys;\r\n```\r\n\r\nyou can also prepare this optimization in advance of the migration. just delete `apps/files/appinfo/update.php` and execute the following sql (assuming you are on mysql):\r\n```sql\r\nalter table `oc_properties` disable keys;\r\nupdate `oc_properties` set `propertyname` = concat('{dav:}', `propertyname`) where `propertyname` like '{%'\";\r\nalter table `oc_properties` enable keys;\r\n```","closed_by":null}