{"url":"https://api.github.com/repos/owncloud/core/issues/3118","labels_url":"https://api.github.com/repos/owncloud/core/issues/3118/labels{/name}","comments_url":"https://api.github.com/repos/owncloud/core/issues/3118/comments","events_url":"https://api.github.com/repos/owncloud/core/issues/3118/events","html_url":"https://github.com/owncloud/core/issues/3118","id":13613272,"number":3118,"title":"multiple file uploading and deleting is very slow","user":{"login":"jerrac","id":910764,"avatar_url":"https://gravatar.com/avatar/94f514db175a8d425d11b59ddb9914bd?d=https%3a%2f%2fidenticons.github.com%2f2d4e93eae23e52be61d73752b1cd8716.png&r=x","gravatar_id":"94f514db175a8d425d11b59ddb9914bd","url":"https://api.github.com/users/jerrac","html_url":"https://github.com/jerrac","followers_url":"https://api.github.com/users/jerrac/followers","following_url":"https://api.github.com/users/jerrac/following{/other_user}","gists_url":"https://api.github.com/users/jerrac/gists{/gist_id}","starred_url":"https://api.github.com/users/jerrac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jerrac/subscriptions","organizations_url":"https://api.github.com/users/jerrac/orgs","repos_url":"https://api.github.com/users/jerrac/repos","events_url":"https://api.github.com/users/jerrac/events{/privacy}","received_events_url":"https://api.github.com/users/jerrac/received_events","type":"user","site_admin":false},"labels":[{"url":"https://api.github.com/repos/owncloud/core/labels/bug","name":"bug","color":"fc2929"}],"state":"closed","assignee":null,"milestone":{"url":"https://api.github.com/repos/owncloud/core/milestones/3","labels_url":"https://api.github.com/repos/owncloud/core/milestones/3/labels","id":199679,"number":3,"title":"owncloud 6","description":"","creator":{"login":"lukasreschke","id":878997,"avatar_url":"https://gravatar.com/avatar/f080e75d370a4d8e550983a4898bcf3b?d=https%3a%2f%2fidenticons.github.com%2ff12e47d5bb5359a9f58e8217413be790.png&r=x","gravatar_id":"f080e75d370a4d8e550983a4898bcf3b","url":"https://api.github.com/users/lukasreschke","html_url":"https://github.com/lukasreschke","followers_url":"https://api.github.com/users/lukasreschke/followers","following_url":"https://api.github.com/users/lukasreschke/following{/other_user}","gists_url":"https://api.github.com/users/lukasreschke/gists{/gist_id}","starred_url":"https://api.github.com/users/lukasreschke/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lukasreschke/subscriptions","organizations_url":"https://api.github.com/users/lukasreschke/orgs","repos_url":"https://api.github.com/users/lukasreschke/repos","events_url":"https://api.github.com/users/lukasreschke/events{/privacy}","received_events_url":"https://api.github.com/users/lukasreschke/received_events","type":"user","site_admin":false},"open_issues":19,"closed_issues":645,"state":"open","created_at":"2012-10-22t21:38:51z","updated_at":"2013-12-18t11:11:18z","due_on":null},"comments":85,"created_at":"2013-04-24t22:05:31z","updated_at":"2013-12-18t22:41:01z","closed_at":"2013-10-30t14:03:38z","pull_request":{"html_url":null,"diff_url":null,"patch_url":null},"body":"summary\r\n=======\r\n\r\nthis is kinda long. to summarize, owncloud appears to have issues when dealing with large numbers of files. both on upload and delete. via both the sync client and webdav. after some testing, and reading the issue queues, i'm sure it probably has something to do with how many sql queries that have to run when uploading or deleting a file.\r\n\r\nthe slowness of uploading and deleting effectively makes owncloud unbearble to use. \r\n\r\nhttps://github.com/owncloud/mirall/issues/331 is the issue i would normally post this to, but this is core problem. not a mirall problem. it's also focussed on the sync client.\r\n\r\nin the core queue, i found https://github.com/owncloud/core/issues/769 and https://github.com/owncloud/core/issues/2010 but both are mac specific.\r\n\r\nso i don't think i'm posting a duplicate, but i'll leave that decision up to someone else. especially if i missed a better issue to post on when i searched...\r\n\r\nserver/client config\r\n====================\r\n\r\nmy owncloud server is running 5.0.5 on ubuntu 12.04 with apache 2.2.22 and php 5.3.10.\r\n\r\nmy desktop is running nautilus 3.4.2 on ubuntu 12.04. \r\n\r\nthe problem\r\n===========\r\n\r\nwhen uploading a 95mb folder to owncloud via nautilus, the fastest speed i saw was 600ish kb/sec. most of the time it was under 100-150ish kb/sec. the folder had hundreds of files in it. it took at least 20 minutes to upload. all according to the nautilus file copy dialog.\r\n\r\nuploading a zip of the same folder was basically instant. as was any single file upload.\r\n\r\ncan't really tell you what kind of speeds i got with the client, but it did take just as long as with webdav.\r\n\r\nwhen uploading or deleting i see the server cpu fluctuate up to 60+%. \r\n\r\nmy hardware is pretty powerful, on both client and server. so, seeing that high of a load with just one person uploading is not good.\r\n\r\ndiagnostics\r\n===========\r\n\r\nwhen uploading, i tailed the owncloud.log and saw a lot of messages like this:\r\n\r\n```\r\n{\"app\":\"core\",\"message\":\"adding user backend instance of oca\\\\user_ldap\\\\user_ldap.\",\"level\":0,\"time\":1366827798}\r\n{\"app\":\"core\",\"message\":\"adding user backend instance of oc_user_database.\",\"level\":0,\"time\":1366827799}\r\n{\"app\":\"core\",\"message\":\"adding user backend instance of oca\\\\user_ldap\\\\user_ldap.\",\"level\":0,\"time\":1366827799}\r\n{\"app\":\"core\",\"message\":\"adding user backend instance of oc_user_database.\",\"level\":0,\"time\":1366827799}\r\n{\"app\":\"core\",\"message\":\"adding user backend instance of oca\\\\user_ldap\\\\user_ldap.\",\"level\":0,\"time\":1366827799}\r\n{\"app\":\"core\",\"message\":\"adding user backend instance of oc_user_database.\",\"level\":0,\"time\":1366827799}\r\n{\"app\":\"core\",\"message\":\"adding user backend instance of oca\\\\user_ldap\\\\user_ldap.\",\"level\":0,\"time\":1366827799}\r\n{\"app\":\"core\",\"message\":\"adding user backend instance of oc_user_database.\",\"level\":0,\"time\":1366827799}\r\n{\"app\":\"core\",\"message\":\"adding user backend instance of oca\\\\user_ldap\\\\user_ldap.\",\"level\":0,\"time\":1366827799}\r\n{\"app\":\"core\",\"message\":\"adding user backend instance of oc_user_database.\",\"level\":0,\"time\":1366827799}\r\n{\"app\":\"core\",\"message\":\"adding user backend instance of oca\\\\user_ldap\\\\user_ldap.\",\"level\":0,\"time\":1366827799}\r\n```\r\n\r\nwhat exactly does that mean?\r\n\r\nmy user is an ldap user. and all my potential users will be authenticating via ldap.\r\n\r\ni also tried moving the database to localhost instead of hosting on my normal mysql server. now i see mysqld rise to the top of htop while uploading and deleting.\r\n\r\ni increased the mysql query_cache_limit to 8m and query_cache_size to 64m. i think it sped up a bit, but i'm not sure it's not just my imagination.\r\n\r\ni also turned on the slow query log. i get the following when uploading a single file, and when uploading lots of files, (and tailing the log) the log appears to do the same for every single file in the multi upload.\r\n\r\n```\r\n# time: 130424 12:23:00\r\n# user@host: testfilehost[testfilehost] @ localhost []\r\n# query_time: 0.004940  lock_time: 0.000032 rows_sent: 0  rows_examined: 11827\r\nset timestamp=1366831380;\r\nselect `path`, `fileid` from `oc_filecache` where `path` like 'files/testing/titan profile.png.part/%';\r\n# user@host: testfilehost[testfilehost] @ localhost []\r\n# query_time: 0.000380  lock_time: 0.000061 rows_sent: 0  rows_examined: 5\r\nset timestamp=1366831380;\r\nselect `oc_share`.`id`, `item_type`, `oc_share`.`parent`, `share_type`, `share_with`, `file_source`, `path`, `permissions`, `stime`, `expiration`, `token`, `storage` from `oc_share` inner join `oc_filecache` on `file_source` = `oc_filecache`.`fileid` and `uid_owner` = 'useruid' and `share_type` != '2' and ( `file_source` = '52767' or `item_type` in ('folder'));\r\n# user@host: testfilehost[testfilehost] @ localhost []\r\n# query_time: 0.000297  lock_time: 0.000044 rows_sent: 0  rows_examined: 5\r\nset timestamp=1366831380;\r\nselect `oc_share`.`id`, `item_type`, `oc_share`.`parent`, `share_type`, `share_with`, `file_source`, `path`, `permissions`, `stime`, `expiration`, `token`, `storage` from `oc_share` inner join `oc_filecache` on `file_source` = `oc_filecache`.`fileid` and `uid_owner` = 'useruid' and `share_type` != '2' and ( `file_source` = '39286' or `item_type` in ('folder'));\r\n# user@host: testfilehost[testfilehost] @ localhost []\r\n# query_time: 0.000240  lock_time: 0.000083 rows_sent: 0  rows_examined: 5\r\nset timestamp=1366831380;\r\nselect `oc_share`.`id`, `item_type`, `item_source`, `item_target`,\r\n\t\t\t\t\t\t\t`oc_share`.`parent`, `share_type`, `share_with`, `uid_owner`,\r\n\t\t\t\t\t\t\t`file_source`, `path`, `file_target`, `permissions`, `stime`, `expiration`, `token`, `storage` from `oc_share` inner join `oc_filecache` on `file_source` = `oc_filecache`.`fileid` where `file_target` is not null and `share_type` in ('0','1','2') and `share_with` in ('useruid') and `uid_owner` != 'useruid';\r\n```\r\n\r\ni get the same behavior uploading from a windows xp virtualbox vm.\r\n\r\ni haven't tried myself, but others in my department have reported the mac osx is slow. like in the issues i linked to earlier.\r\n\r\ndeleting the uploaded folder is just as slow as uploading.\r\n\r\nsame with the sync client.\r\n\r\nwhile deleting, the slow query log shows a lot of queries like these:\r\n\r\n```\r\n# user@host: testfilehost[testfilehost] @ localhost []\r\n# query_time: 0.000172  lock_time: 0.000059 rows_sent: 0  rows_examined: 5\r\nset timestamp=1366837346;\r\nselect `oc_share`.`id`, `item_type`, `oc_share`.`parent`, `share_type`, `share_with`, `file_source`, `path`, `permissions`, `stime`, `expiration`, `token`, `storage` from `oc_share` inner join `oc_filecache` on `file_source` = `oc_filecache`.`fileid` and `uid_owner` = 'useruid' and `share_type` != '2' and ( `file_source` = '55519' or `item_type` in ('folder'));\r\n# user@host: testfilehost[testfilehost] @ localhost []\r\n# query_time: 0.000091  lock_time: 0.000035 rows_sent: 1  rows_examined: 3\r\nset timestamp=1366837346;\r\nselect `size` from `oc_files_trashsize` where `user`='useruid';\r\n# user@host: testfilehost[testfilehost] @ localhost []\r\n# query_time: 0.002972  lock_time: 0.000027 rows_sent: 4906  rows_examined: 4911\r\nset timestamp=1366837346;\r\nselect `location`,`type`,`id`,`timestamp` from `oc_files_trash` where `user`='useruid';\r\n# user@host: testfilehost[testfilehost] @ localhost []\r\n# query_time: 0.000158  lock_time: 0.000057 rows_sent: 0  rows_examined: 3\r\nset timestamp=1366837346;\r\nupdate `oc_files_trashsize` set `size`='976451849' where `user`='useruid';\r\n# user@host: testfilehost[testfilehost] @ localhost []\r\n# query_time: 0.000204  lock_time: 0.000069 rows_sent: 0  rows_examined: 5\r\nset timestamp=1366837346;\r\nselect `oc_share`.`id`, `item_type`, `item_source`, `item_target`,\r\n\t\t\t\t\t\t\t`oc_share`.`parent`, `share_type`, `share_with`, `uid_owner`,\r\n\t\t\t\t\t\t\t`file_source`, `path`, `file_target`, `permissions`, `stime`, `expiration`, `token`, `storage` from `oc_share` inner join `oc_filecache` on `file_source` = `oc_filecache`.`fileid` where `file_target` is not null and `share_type` in ('0','1','2') and `share_with` in ('useruid') and `uid_owner` != 'useruid';\r\n```\r\n\r\ni tried increasing my php memory to 256m and saw no difference.\r\n\r\nmy last test before posting this was to try connecting to my local install on my desktop. no network, on an ssd, 8 core cpu, 16gb of ram, no https. still slow. it might be faster than over the network, but not enough for me to notice... owncloud was running code from the master branch, as of yesterday sometime. not 5.0.5.\r\n\r\nending thoughts\r\n===============\r\n\r\nam i right in blaming the sql queries for this? are there some other server settings i could try? \r\n\r\nfrom what i can tell, the issue is that there is a lot of overhead to uploading or deleting a file. thus, when you need to do that more than a couple times, it's slow. how can the overhead be reduced?\r\n\r\nare there some better ways i can test this than just uploading a random folder with a few thousand files in it? ways that would provide more useful data?","closed_by":{"login":"deepdiver1975","id":1005065,"avatar_url":"https://gravatar.com/avatar/bdba071ed68da9ce8edae53c364902ef?d=https%3a%2f%2fidenticons.github.com%2f67e101ad9531b7d25697b76e503e062e.png&r=x","gravatar_id":"bdba071ed68da9ce8edae53c364902ef","url":"https://api.github.com/users/deepdiver1975","html_url":"https://github.com/deepdiver1975","followers_url":"https://api.github.com/users/deepdiver1975/followers","following_url":"https://api.github.com/users/deepdiver1975/following{/other_user}","gists_url":"https://api.github.com/users/deepdiver1975/gists{/gist_id}","starred_url":"https://api.github.com/users/deepdiver1975/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/deepdiver1975/subscriptions","organizations_url":"https://api.github.com/users/deepdiver1975/orgs","repos_url":"https://api.github.com/users/deepdiver1975/repos","events_url":"https://api.github.com/users/deepdiver1975/events{/privacy}","received_events_url":"https://api.github.com/users/deepdiver1975/received_events","type":"user","site_admin":false}}