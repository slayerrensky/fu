[{"url":"https://api.github.com/repos/owncloud/core/issues/comments/10039149","html_url":"https://github.com/owncloud/core/pull/230#issuecomment-10039149","issue_url":"https://api.github.com/repos/owncloud/core/issues/230","id":10039149,"user":{"login":"owncloud-bot","id":2709266,"avatar_url":"https://gravatar.com/avatar/6e9c466b35bb113112f7401859d614f6?d=https%3a%2f%2fidenticons.github.com%2ffb9254ba3a207c96653361df97807914.png&r=x","gravatar_id":"6e9c466b35bb113112f7401859d614f6","url":"https://api.github.com/users/owncloud-bot","html_url":"https://github.com/owncloud-bot","followers_url":"https://api.github.com/users/owncloud-bot/followers","following_url":"https://api.github.com/users/owncloud-bot/following{/other_user}","gists_url":"https://api.github.com/users/owncloud-bot/gists{/gist_id}","starred_url":"https://api.github.com/users/owncloud-bot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/owncloud-bot/subscriptions","organizations_url":"https://api.github.com/users/owncloud-bot/orgs","repos_url":"https://api.github.com/users/owncloud-bot/repos","events_url":"https://api.github.com/users/owncloud-bot/events{/privacy}","received_events_url":"https://api.github.com/users/owncloud-bot/received_events","type":"user","site_admin":false},"created_at":"2012-11-03t13:05:35z","updated_at":"2012-11-03t13:05:35z","body":"can one of the admins verify this patch?"},{"url":"https://api.github.com/repos/owncloud/core/issues/comments/10051003","html_url":"https://github.com/owncloud/core/pull/230#issuecomment-10051003","issue_url":"https://api.github.com/repos/owncloud/core/issues/230","id":10051003,"user":{"login":"deepdiver1975","id":1005065,"avatar_url":"https://gravatar.com/avatar/bdba071ed68da9ce8edae53c364902ef?d=https%3a%2f%2fidenticons.github.com%2f67e101ad9531b7d25697b76e503e062e.png&r=x","gravatar_id":"bdba071ed68da9ce8edae53c364902ef","url":"https://api.github.com/users/deepdiver1975","html_url":"https://github.com/deepdiver1975","followers_url":"https://api.github.com/users/deepdiver1975/followers","following_url":"https://api.github.com/users/deepdiver1975/following{/other_user}","gists_url":"https://api.github.com/users/deepdiver1975/gists{/gist_id}","starred_url":"https://api.github.com/users/deepdiver1975/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/deepdiver1975/subscriptions","organizations_url":"https://api.github.com/users/deepdiver1975/orgs","repos_url":"https://api.github.com/users/deepdiver1975/repos","events_url":"https://api.github.com/users/deepdiver1975/events{/privacy}","received_events_url":"https://api.github.com/users/deepdiver1975/received_events","type":"user","site_admin":false},"created_at":"2012-11-04t14:29:06z","updated_at":"2012-11-04t14:29:06z","body":"@owncloud-bot this is ok to test"},{"url":"https://api.github.com/repos/owncloud/core/issues/comments/10053815","html_url":"https://github.com/owncloud/core/pull/230#issuecomment-10053815","issue_url":"https://api.github.com/repos/owncloud/core/issues/230","id":10053815,"user":{"login":"blizzz","id":2184312,"avatar_url":"https://gravatar.com/avatar/1898b25a9cb3aa1a0f0febd1359910b9?d=https%3a%2f%2fidenticons.github.com%2fca03acec6deadf508b75eb0cf9ba036c.png&r=x","gravatar_id":"1898b25a9cb3aa1a0f0febd1359910b9","url":"https://api.github.com/users/blizzz","html_url":"https://github.com/blizzz","followers_url":"https://api.github.com/users/blizzz/followers","following_url":"https://api.github.com/users/blizzz/following{/other_user}","gists_url":"https://api.github.com/users/blizzz/gists{/gist_id}","starred_url":"https://api.github.com/users/blizzz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blizzz/subscriptions","organizations_url":"https://api.github.com/users/blizzz/orgs","repos_url":"https://api.github.com/users/blizzz/repos","events_url":"https://api.github.com/users/blizzz/events{/privacy}","received_events_url":"https://api.github.com/users/blizzz/received_events","type":"user","site_admin":false},"created_at":"2012-11-04t18:52:14z","updated_at":"2012-11-04t18:52:50z","body":":-1:\r\n\r\nformal aspects:\r\n- split into two methods entryexists and entryreader unnecessary\r\n- java doc style documentation as well as inline documentation is missing\r\n\r\npractical aspects:\r\n- the only change is the detection and handling when the passed attribute is an empty array. easier and more reasonable is to adjust the readattribute() method. it should check $attr for emptiness before the call to ldap_first_entry() and return an empty array in this case."},{"url":"https://api.github.com/repos/owncloud/core/issues/comments/10074107","html_url":"https://github.com/owncloud/core/pull/230#issuecomment-10074107","issue_url":"https://api.github.com/repos/owncloud/core/issues/230","id":10074107,"user":{"login":"lmctv","id":1045050,"avatar_url":"https://gravatar.com/avatar/fbf4d5a0322489066999621ee15637ae?d=https%3a%2f%2fidenticons.github.com%2fb57b3454a0ec7f015219bf30c111896b.png&r=x","gravatar_id":"fbf4d5a0322489066999621ee15637ae","url":"https://api.github.com/users/lmctv","html_url":"https://github.com/lmctv","followers_url":"https://api.github.com/users/lmctv/followers","following_url":"https://api.github.com/users/lmctv/following{/other_user}","gists_url":"https://api.github.com/users/lmctv/gists{/gist_id}","starred_url":"https://api.github.com/users/lmctv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lmctv/subscriptions","organizations_url":"https://api.github.com/users/lmctv/orgs","repos_url":"https://api.github.com/users/lmctv/repos","events_url":"https://api.github.com/users/lmctv/events{/privacy}","received_events_url":"https://api.github.com/users/lmctv/received_events","type":"user","site_admin":false},"created_at":"2012-11-05t15:16:37z","updated_at":"2012-11-05t15:30:48z","body":"as a matter of facts, i created a no-refactor branch at wardragon/core@510191db6885153a98350d1a3530834491e0b552, \r\nbut i still think that this kind of hazy api should better be kept hidden\r\nin a private function out of caller's view.\r\n\r\n```php\r\n\t/**\r\n\t * @brief reads a given attribute for an ldap record identified by a dn\r\n\t * @param $dn the record in question\r\n\t * @param $attr the attribute that shall be retrieved\r\n\t *        if empty, just check the record's existence\r\n\t * @returns true or the values in an array on success, false otherwise\r\n\t *\r\n\t * reads an attribute from an ldap entry or check if entry exists\r\n\t */\r\n\tpublic function readattribute($dn, $attr, $filter = 'objectclass=*') {\r\n```\r\n\r\nthank you very much.\r\n\r\nthe problem with blizzz's suggestion is that we need a return value which qualifies as true\r\nin https://github.com/owncloud/core/blob/master/apps/user_ldap/user_ldap.php#l153"},{"url":"https://api.github.com/repos/owncloud/core/issues/comments/10075893","html_url":"https://github.com/owncloud/core/pull/230#issuecomment-10075893","issue_url":"https://api.github.com/repos/owncloud/core/issues/230","id":10075893,"user":{"login":"blizzz","id":2184312,"avatar_url":"https://gravatar.com/avatar/1898b25a9cb3aa1a0f0febd1359910b9?d=https%3a%2f%2fidenticons.github.com%2fca03acec6deadf508b75eb0cf9ba036c.png&r=x","gravatar_id":"1898b25a9cb3aa1a0f0febd1359910b9","url":"https://api.github.com/users/blizzz","html_url":"https://github.com/blizzz","followers_url":"https://api.github.com/users/blizzz/followers","following_url":"https://api.github.com/users/blizzz/following{/other_user}","gists_url":"https://api.github.com/users/blizzz/gists{/gist_id}","starred_url":"https://api.github.com/users/blizzz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blizzz/subscriptions","organizations_url":"https://api.github.com/users/blizzz/orgs","repos_url":"https://api.github.com/users/blizzz/repos","events_url":"https://api.github.com/users/blizzz/events{/privacy}","received_events_url":"https://api.github.com/users/blizzz/received_events","type":"user","site_admin":false},"created_at":"2012-11-05t16:00:10z","updated_at":"2012-11-05t16:00:10z","body":"no, we can give a back an empty array (which is not false). with a simple if(is_array($return)) you see whether it ended up correctly. that was my suggestion. although giving back true could be feasible, i'd sticking to the current return policy. \r\n\r\ni don't see a point in making it private and call it thorugh a public method. let's keep things simple and straightforward."},{"url":"https://api.github.com/repos/owncloud/core/issues/comments/10078396","html_url":"https://github.com/owncloud/core/pull/230#issuecomment-10078396","issue_url":"https://api.github.com/repos/owncloud/core/issues/230","id":10078396,"user":{"login":"lmctv","id":1045050,"avatar_url":"https://gravatar.com/avatar/fbf4d5a0322489066999621ee15637ae?d=https%3a%2f%2fidenticons.github.com%2fb57b3454a0ec7f015219bf30c111896b.png&r=x","gravatar_id":"fbf4d5a0322489066999621ee15637ae","url":"https://api.github.com/users/lmctv","html_url":"https://github.com/lmctv","followers_url":"https://api.github.com/users/lmctv/followers","following_url":"https://api.github.com/users/lmctv/following{/other_user}","gists_url":"https://api.github.com/users/lmctv/gists{/gist_id}","starred_url":"https://api.github.com/users/lmctv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lmctv/subscriptions","organizations_url":"https://api.github.com/users/lmctv/orgs","repos_url":"https://api.github.com/users/lmctv/repos","events_url":"https://api.github.com/users/lmctv/events{/privacy}","received_events_url":"https://api.github.com/users/lmctv/received_events","type":"user","site_admin":false},"created_at":"2012-11-05t16:59:35z","updated_at":"2012-11-05t16:59:35z","body":"closing pull request replaced by https://github.com/owncloud/core/pull/258."}]